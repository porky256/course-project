// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	models "github.com/porky256/course-project/internal/models"
)

// MockDatabaseRepo is a mock of DatabaseRepo interface.
type MockDatabaseRepo struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseRepoMockRecorder
}

// MockDatabaseRepoMockRecorder is the mock recorder for MockDatabaseRepo.
type MockDatabaseRepoMockRecorder struct {
	mock *MockDatabaseRepo
}

// NewMockDatabaseRepo creates a new mock instance.
func NewMockDatabaseRepo(ctrl *gomock.Controller) *MockDatabaseRepo {
	mock := &MockDatabaseRepo{ctrl: ctrl}
	mock.recorder = &MockDatabaseRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabaseRepo) EXPECT() *MockDatabaseRepoMockRecorder {
	return m.recorder
}

// Authenticate mocks base method.
func (m *MockDatabaseRepo) Authenticate(email, passwordSample string) (int, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authenticate", email, passwordSample)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Authenticate indicates an expected call of Authenticate.
func (mr *MockDatabaseRepoMockRecorder) Authenticate(email, passwordSample interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authenticate", reflect.TypeOf((*MockDatabaseRepo)(nil).Authenticate), email, passwordSample)
}

// AvailabilityOfAllRooms mocks base method.
func (m *MockDatabaseRepo) AvailabilityOfAllRooms(start, end time.Time) ([]models.Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AvailabilityOfAllRooms", start, end)
	ret0, _ := ret[0].([]models.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AvailabilityOfAllRooms indicates an expected call of AvailabilityOfAllRooms.
func (mr *MockDatabaseRepoMockRecorder) AvailabilityOfAllRooms(start, end interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AvailabilityOfAllRooms", reflect.TypeOf((*MockDatabaseRepo)(nil).AvailabilityOfAllRooms), start, end)
}

// GetAllReservations mocks base method.
func (m *MockDatabaseRepo) GetAllReservations() ([]models.Reservation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllReservations")
	ret0, _ := ret[0].([]models.Reservation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllReservations indicates an expected call of GetAllReservations.
func (mr *MockDatabaseRepoMockRecorder) GetAllReservations() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllReservations", reflect.TypeOf((*MockDatabaseRepo)(nil).GetAllReservations))
}

// GetNewReservations mocks base method.
func (m *MockDatabaseRepo) GetNewReservations() ([]models.Reservation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNewReservations")
	ret0, _ := ret[0].([]models.Reservation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNewReservations indicates an expected call of GetNewReservations.
func (mr *MockDatabaseRepoMockRecorder) GetNewReservations() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNewReservations", reflect.TypeOf((*MockDatabaseRepo)(nil).GetNewReservations))
}

// GetReservationByID mocks base method.
func (m *MockDatabaseRepo) GetReservationByID(id int) (*models.Reservation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReservationByID", id)
	ret0, _ := ret[0].(*models.Reservation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReservationByID indicates an expected call of GetReservationByID.
func (mr *MockDatabaseRepoMockRecorder) GetReservationByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReservationByID", reflect.TypeOf((*MockDatabaseRepo)(nil).GetReservationByID), id)
}

// GetRoomByID mocks base method.
func (m *MockDatabaseRepo) GetRoomByID(id int) (*models.Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoomByID", id)
	ret0, _ := ret[0].(*models.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoomByID indicates an expected call of GetRoomByID.
func (mr *MockDatabaseRepoMockRecorder) GetRoomByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoomByID", reflect.TypeOf((*MockDatabaseRepo)(nil).GetRoomByID), id)
}

// GetUserByID mocks base method.
func (m *MockDatabaseRepo) GetUserByID(id int) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", id)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockDatabaseRepoMockRecorder) GetUserByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockDatabaseRepo)(nil).GetUserByID), id)
}

// InsertReservation mocks base method.
func (m *MockDatabaseRepo) InsertReservation(res *models.Reservation) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertReservation", res)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertReservation indicates an expected call of InsertReservation.
func (mr *MockDatabaseRepoMockRecorder) InsertReservation(res interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertReservation", reflect.TypeOf((*MockDatabaseRepo)(nil).InsertReservation), res)
}

// InsertRestriction mocks base method.
func (m *MockDatabaseRepo) InsertRestriction(res *models.Restriction) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertRestriction", res)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertRestriction indicates an expected call of InsertRestriction.
func (mr *MockDatabaseRepoMockRecorder) InsertRestriction(res interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertRestriction", reflect.TypeOf((*MockDatabaseRepo)(nil).InsertRestriction), res)
}

// InsertRoom mocks base method.
func (m *MockDatabaseRepo) InsertRoom(room *models.Room) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertRoom", room)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertRoom indicates an expected call of InsertRoom.
func (mr *MockDatabaseRepoMockRecorder) InsertRoom(room interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertRoom", reflect.TypeOf((*MockDatabaseRepo)(nil).InsertRoom), room)
}

// InsertRoomRestriction mocks base method.
func (m *MockDatabaseRepo) InsertRoomRestriction(rmres *models.RoomRestriction) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertRoomRestriction", rmres)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertRoomRestriction indicates an expected call of InsertRoomRestriction.
func (mr *MockDatabaseRepoMockRecorder) InsertRoomRestriction(rmres interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertRoomRestriction", reflect.TypeOf((*MockDatabaseRepo)(nil).InsertRoomRestriction), rmres)
}

// InsertUser mocks base method.
func (m *MockDatabaseRepo) InsertUser(user *models.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUser", user)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertUser indicates an expected call of InsertUser.
func (mr *MockDatabaseRepoMockRecorder) InsertUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUser", reflect.TypeOf((*MockDatabaseRepo)(nil).InsertUser), user)
}

// LookForAvailabilityOfRoom mocks base method.
func (m *MockDatabaseRepo) LookForAvailabilityOfRoom(start, end time.Time, roomID int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookForAvailabilityOfRoom", start, end, roomID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookForAvailabilityOfRoom indicates an expected call of LookForAvailabilityOfRoom.
func (mr *MockDatabaseRepoMockRecorder) LookForAvailabilityOfRoom(start, end, roomID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookForAvailabilityOfRoom", reflect.TypeOf((*MockDatabaseRepo)(nil).LookForAvailabilityOfRoom), start, end, roomID)
}
